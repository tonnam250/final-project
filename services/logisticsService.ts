import API_BASE_URL from './apiConfig';

const API_URL = `${API_BASE_URL}/logistics`;

import {
    uploadCertificate,
} from "./certificateService";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å
export const updateLogisticsInfo = async (logisticsData: any) => {
    try {
        const formData = new FormData();
        formData.append("logisticsName", logisticsData?.logisticsName || "");
        formData.append("address", logisticsData?.address || "");
        formData.append("district", logisticsData?.district || "");
        formData.append("subdistrict", logisticsData?.subdistrict || "");
        formData.append("province", logisticsData?.province || "");
        formData.append("postCode", logisticsData?.postCode || "");
        formData.append("phone", logisticsData?.telephone || "");
        formData.append("areaCode", logisticsData?.areaCode || "");
        formData.append("location_link", logisticsData?.location || "");

        console.log("üìå [DEBUG] Sending updateLogisticsInfo ‚Üí FormData:");
        for (const pair of formData.entries()) {
            console.log(`${pair[0]}: ${pair[1]}`);
        }

        const response = await fetch(`${API_URL}/`, {
            method: "PUT",
            credentials: "include",
            body: formData,
        });

        if (!response.ok) {
            throw new Error(`Updating logistics failed: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error("‚ùå Error updating logistics:", error);
        throw error;
    }
};

export const getLogisticsInfo = async (): Promise<any | null> => {
    try {
        const response = await fetch(`${API_URL}/`, {
            method: "GET",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
        });

        if (response.status === 403) {
            console.warn("üö® User is not a logistics provider (403 Forbidden)");
            return null;
        }

        if (response.status === 404) {
            console.warn("üö® No logistics company found (404 Not Found)");
            return null;
        }

        if (!response.ok) {
            throw new Error(`Fetching logistics data failed: ${response.status}`);
        }

        const data = await response.json();

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ property ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö React
        return {
            logisticsName: data.logisticsName,  // ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö React
            email: data.email,
            address: data.address,
            district: data.district,
            subdistrict: data.subdistrict,
            province: data.province,
            telephone: data.telephone,
            areaCode: data.areaCode,
            location: data.location_link,  // ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö React
        };
    } catch (error) {
        console.error("‚ùå [ERROR] Fetching logistics data failed:", error);
        return null;
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå‡πÉ‡∏´‡∏°‡πà
export const createLogistics = async (logisticsData: any): Promise<any | null> => {
    try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ `FormData` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ Backend
        const formData = new FormData();
        formData.append("logisticsName", logisticsData.logisticsName);
        formData.append("email", logisticsData.email);
        formData.append("address", logisticsData.address);
        formData.append("district", logisticsData.district);
        formData.append("subdistrict", logisticsData.subdistrict); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        formData.append("province", logisticsData.province);
        formData.append("phone", logisticsData.phone); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        formData.append("areaCode", logisticsData.areaCode); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        formData.append("location_link", logisticsData.location); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend
        formData.append("cert_cid", logisticsData.certCID); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend

        console.log("üìå Final FormData before sending:", formData);

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Backend (‡πÅ‡∏Å‡πâ URL)
        const response = await fetch(`${API_URL}/`, {
            method: "POST",
            credentials: "include",
            body: formData,
        });

        if (!response.ok) {
            throw new Error(`‚ùå Failed to create logistics company: ${response.status}`);
        }

        const result = await response.json();
        console.log("‚úÖ Logistics company created successfully:", result);

        return result;
    } catch (error) {
        console.error("‚ùå [ERROR] Creating logistics company failed:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå");
        return null;
    }
};
